"use strict";(self.webpackChunk_pdfme_website=self.webpackChunk_pdfme_website||[]).push([[2426],{58729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(74848),a=t(28453);const s={title:"Implementation Ideas for Dynamic Tables in pdfme",description:"Explore the innovative solutions for implementing dynamic tables in pdfme, a comprehensive guide discussing challenges, strategies, and ideas for advanced PDF table rendering, including page breaks, table styling, and layout calculations.",slug:"implementation-Ideas-for-dynamic-tables",authors:[{name:"Kyohei Fukuda (@hand-dot)",title:"Author of pdfme",url:"https://github.com/hand-dot",image_url:"https://avatars.githubusercontent.com/u/24843808?v=4"}],tags:[]},l=void 0,o={permalink:"/blog/implementation-Ideas-for-dynamic-tables",source:"@site/blog/2024-01-02-implementation-Ideas-for-dynamic-tables.md",title:"Implementation Ideas for Dynamic Tables in pdfme",description:"Explore the innovative solutions for implementing dynamic tables in pdfme, a comprehensive guide discussing challenges, strategies, and ideas for advanced PDF table rendering, including page breaks, table styling, and layout calculations.",date:"2024-01-02T00:00:00.000Z",tags:[],readingTime:5.615,hasTruncateMarker:!0,authors:[{name:"Kyohei Fukuda (@hand-dot)",title:"Author of pdfme",url:"https://github.com/hand-dot",image_url:"https://avatars.githubusercontent.com/u/24843808?v=4",imageURL:"https://avatars.githubusercontent.com/u/24843808?v=4"}],frontMatter:{title:"Implementation Ideas for Dynamic Tables in pdfme",description:"Explore the innovative solutions for implementing dynamic tables in pdfme, a comprehensive guide discussing challenges, strategies, and ideas for advanced PDF table rendering, including page breaks, table styling, and layout calculations.",slug:"implementation-Ideas-for-dynamic-tables",authors:[{name:"Kyohei Fukuda (@hand-dot)",title:"Author of pdfme",url:"https://github.com/hand-dot",image_url:"https://avatars.githubusercontent.com/u/24843808?v=4",imageURL:"https://avatars.githubusercontent.com/u/24843808?v=4"}],tags:[]},unlisted:!1,prevItem:{title:"Developing pdfme V4",permalink:"/blog/developing-pdfme-v4"},nextItem:{title:"Why Develop a PDF Library Now?",permalink:"/blog/why-develop-pdf-library-now"}},r={authorsImageUrls:[void 0]},d=[{value:"Why Dynamic Tables Couldn&#39;t Be Implemented in pdfme",id:"why-dynamic-tables-couldnt-be-implemented-in-pdfme",level:2},{value:"How to Implement Page Breaks",id:"how-to-implement-page-breaks",level:2},{value:"How to Tackle the Complexity of Table Settings and Rendering",id:"how-to-tackle-the-complexity-of-table-settings-and-rendering",level:2},{value:"1. Table Styling",id:"1-table-styling",level:3},{value:"2. Setting Headers and Columns",id:"2-setting-headers-and-columns",level:3},{value:"3. Calculating Table Layout",id:"3-calculating-table-layout",level:3},{value:"I Would Appreciate Feedback",id:"i-would-appreciate-feedback",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"Contrary to the plan, we are working on the implementation of the dynamic table in a different way.\nPlease see the following blog article for the latest development information."}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/blog/developing-pdfme-v4",children:"Developing pdfme V4"})}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"why-dynamic-tables-couldnt-be-implemented-in-pdfme",children:"Why Dynamic Tables Couldn't Be Implemented in pdfme"}),"\n",(0,i.jsxs)(n.p,{children:["Until now, pdfme has been realizing simple ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Variable_data_printing",children:"variable data printing"})," by embedding PDF data into a property called ",(0,i.jsx)(n.code,{children:"basePdf"})," in the template and overlaying a ",(0,i.jsx)(n.code,{children:"schema"})," on top of this PDF."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://storage.googleapis.com/zenn-user-upload/b7b9c0b7611e-20240102.png",alt:"Image of the pdfme process"})}),"\n",(0,i.jsx)(n.p,{children:"This method is incredibly simple and allows for the easy creation of customized PDFs."}),"\n",(0,i.jsxs)(n.p,{children:["However, there is a significant need that cannot be ignored for certain use cases in PDF creation.",(0,i.jsx)(n.br,{}),"\n","That need is table rendering. More specifically, many users want to address cases where the number of rows, like in the red-framed section of the image below, increases, such as in invoices."]}),"\n",(0,i.jsx)("img",{src:"https://storage.googleapis.com/zenn-user-upload/53a9a0a584fc-20240102.png",width:"500px"}),"\n",(0,i.jsx)(n.p,{children:"The method of overlaying a schema on the basePdf, as explained above, doesn't allow for an efficient implementation of page breaks."}),"\n",(0,i.jsx)(n.p,{children:"Therefore, the current version of pdfme cannot support tables where rows dynamically increase."}),"\n",(0,i.jsxs)(n.p,{children:["I understand this need but was struggling with how exactly to implement it.",(0,i.jsx)(n.br,{}),"\n","This has been the main blocker in implementing Tables."]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-implement-page-breaks",children:"How to Implement Page Breaks"}),"\n",(0,i.jsxs)(n.p,{children:["I've been ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/discussions/148",children:"discussing"})," this with users for quite some time, and finally, there seems to be a way to implement page breaks. Two key elements have come together:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ReadOnly Schemas added in ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/releases/tag/3.2.0",children:"V3.2.0"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Line, Rectangle, Ellipse, SVG, Text, Image"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["A new way to specify basePdf and padding implemented for ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/pull/394",children:"V4"}),", called ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/c4dfa7023a42d9ab207784a6557f902c078bdcd6/packages/common/src/schema.ts#L87",children:"BlankPDF"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With ReadOnly Schemas, it's possible to design the static parts of a template within pdfme without loading a PDF designed in basePdf. This allows for the addition of the height of schemas added to the page, adjusting the y-coordinate of all schemas below it by the increased height. Padding also allows control over where to resume rendering after a page break."}),"\n",(0,i.jsx)(n.p,{children:"The following figure shows an example where 19 rows of table data are provided, causing a page break, and the 'note' schema being pushed down."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Example of table with page break",src:t(90661).A+"",width:"4705",height:"3766"})}),"\n",(0,i.jsx)(n.p,{children:"The logic I had in mind was:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Render the table one row at a time, from Header to Row19."}),"\n",(0,i.jsx)(n.li,{children:"As the height increases and spills over the first page at Row 12, a page break occurs, creating a second page."}),"\n",(0,i.jsx)(n.li,{children:"After rendering up to Row19, the generator function returns the final height of the table, which is retained in a variable like yAdjust (190mm in the figure above)."}),"\n",(0,i.jsx)(n.li,{children:"For all schemas below the increased height schema (in this example, 'note'), add the increased height (190mm) to their y-coordinate. The rendering starts on the second page at a y-coordinate of 140mm."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The issue is that it doesn't accommodate fixed layouts like headers or footers. In that case, instead of specifying the size of ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/c4dfa7023a42d9ab207784a6557f902c078bdcd6/packages/common/src/schema.ts#L87",children:"BlankPDF"}),"'s width and height, specify a PDF containing the fixed design of the header or footer. This is planned for further modification."]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-tackle-the-complexity-of-table-settings-and-rendering",children:"How to Tackle the Complexity of Table Settings and Rendering"}),"\n",(0,i.jsxs)(n.p,{children:["Table settings and rendering can get complex. How should we approach it?",(0,i.jsx)(n.br,{}),"\n","I want to leverage the simplicity of pdfme, which allows for easy PDF creation, to implement the table functionality."]}),"\n",(0,i.jsx)(n.p,{children:"For example, consider how to set up the following table."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://storage.googleapis.com/zenn-user-upload/5607ddfc06c7-20240102.png",alt:"Example of a complex table"})}),"\n",(0,i.jsxs)(n.p,{children:["A table is essentially composed of headers (th) and table data (td).",(0,i.jsx)(n.br,{}),"\n","Table data may be rendered in something other than text. In this example, ",(0,i.jsx)(n.code,{children:"Name"})," and ",(0,i.jsx)(n.code,{children:"Category"})," columns are rendered with a Text renderer, while ",(0,i.jsx)(n.code,{children:"Image"})," column is rendered with an Image renderer."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fortunately, pdfme already implements various renderers like Text, Image, SVG, Barcodes, etc. Therefore, there's no need to create new rendering processes for each cell; once the size and position of a cell are determined, existing PDF rendering processes can be used."})}),"\n",(0,i.jsx)(n.p,{children:"This leverages the plugin architecture of pdfme's rendering processes, potentially simplifying complex tasks."}),"\n",(0,i.jsxs)(n.p,{children:["This idea came from an ",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/issues/332#issuecomment-1872032370",children:"interesting comment"})," left by ",(0,i.jsx)(n.a,{href:"https://github.com/MP70",children:"MP70"})," on the dynamic table issue.",(0,i.jsx)(n.br,{}),"\n","Considering the above, I believe the table should do the following three things:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-table-styling",children:"1. Table Styling"}),"\n",(0,i.jsx)(n.p,{children:"The following image shows a QR code setting panel, but similar style settings should be possible for tables as well."}),"\n",(0,i.jsx)("img",{src:"https://storage.googleapis.com/zenn-user-upload/9444827add81-20240102.png",width:"500px"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Border","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"color, width"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cell Padding (content margin)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"horizontal, vertical"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cell Background Color","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Plan to implement a stripe design, alternating odd and even rows"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Header Visibility"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-setting-headers-and-columns",children:"2. Setting Headers and Columns"}),"\n",(0,i.jsx)(n.p,{children:"Add columns to the header and set how they will be rendered."}),"\n",(0,i.jsx)("img",{src:"https://storage.googleapis.com/zenn-user-upload/560ebea7ca2e-20240102.png",width:"500px"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each column is rendered with ",(0,i.jsx)(n.code,{children:"ReadOnlyText"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Options available in the existing Text renderer like text color and background color can be used"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Specify Type to set up rendering of table data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use renderers available in pdfme like Image, Barcodes, etc., as types"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Clicking the gear icon in the image above opens a modal to set the Column and Type"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-calculating-table-layout",children:"3. Calculating Table Layout"}),"\n",(0,i.jsx)(n.p,{children:"Once the style and column rendering settings are determined, calculate the layout and render the cells."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calculating and rendering cell positions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generally, render at the same x-coordinate as each column, but use the y-coordinate and height of the row above for the y-coordinate. Once the position is set, render the cell using the column settings."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Calculating the height of Rows and Cells","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"As explained in the page break section, the increased height needs to be communicated to the generator function."}),"\n",(0,i.jsxs)(n.li,{children:["As a current issue, the Text renderer, if not using the Dynamic Font Size feature, might render beyond the set height, as shown in the image below.\n",(0,i.jsx)(n.img,{src:"https://storage.googleapis.com/zenn-user-upload/2f880c86b4fd-20240102.png",alt:"Text rendering spilling over set height"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ideally, the row height should be expanded, as shown in the image below. To achieve this, the Text renderer needs to return the rendered height after rendering.","\n",(0,i.jsx)("img",{src:"https://storage.googleapis.com/zenn-user-upload/3b7065ee2f39-20240102.png",width:"500px"}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"The height of each cell's rendering result determines the height of each Row, and the total height of all Rows determines the height of the table."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"i-would-appreciate-feedback",children:"I Would Appreciate Feedback"}),"\n",(0,i.jsxs)(n.p,{children:["The implementation of the table hasn't started yet. Right now, it's just the ideas written in this document.",(0,i.jsx)(n.br,{}),"\n","I believe there are many oversights and issues with these ideas."]}),"\n",(0,i.jsxs)(n.p,{children:["Being an OSS, I hope it gets seen by many and receives feedback and collaboration. If there seem to be any issues, please let me know.",(0,i.jsx)(n.br,{}),"\n","The dynamic table issue is here. Feel free to comment.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/issues/332",children:"https://github.com/pdfme/pdfme/issues/332"})]}),"\n",(0,i.jsxs)(n.p,{children:["And thank you for reading until the end.",(0,i.jsx)(n.br,{}),"\n","If you want to support this project, the easiest way to contribute is to share this article.",(0,i.jsx)(n.br,{}),"\n","I look forward to your continued support for pdfme."]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},90661:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/dynamictable-11cffbb9b2e578378515d95081232ba7.png"},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);