"use strict";(self.webpackChunk_pdfme_website=self.webpackChunk_pdfme_website||[]).push([[295],{9571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"converter","title":"Converter","description":"@pdfme/converter can be used in both Node.js and in the browser.","source":"@site/docs/converter.md","sourceDirName":".","slug":"/converter","permalink":"/docs/converter","draft":false,"unlisted":false,"editUrl":"https://github.com/pdfme/pdfme/tree/main/website/docs/converter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Schemas(Plugins)","permalink":"/docs/custom-schemas"},"next":{"title":"Manipulator","permalink":"/docs/manipulator"}}');var r=t(4848),i=t(8453);const o={},a="Converter",c={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Contact",id:"contact",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"converter",children:"Converter"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@pdfme/converter"})," can be used in both Node.js and in the browser."]}),"\n",(0,r.jsx)(n.p,{children:"Its primary purpose is to convert PDFs into other formats (like images) or to convert various data formats (like Markdown) into PDFs."}),"\n",(0,r.jsx)(n.p,{children:"Although it\u2019s still under development, you can already use the following features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Convert PDF to Images"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/main/packages/converter/src/pdf2img.ts",children:"pdf2img"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retrieve Each Page\u2019s Width and Height"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/main/packages/converter/src/pdf2size.ts",children:"pdf2size"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Planned conversion features include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Markdown to PDF"}),": ",(0,r.jsx)(n.code,{children:"md2pdf"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PDF to Markdown"}),": ",(0,r.jsx)(n.code,{children:"pdf2md"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @pdfme/converter\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you want to convert PDFs to images (",(0,r.jsx)(n.code,{children:"pdf2img"}),") in Node.js, you\u2019ll need ",(0,r.jsx)(n.a,{href:"https://github.com/Automattic/node-canvas",children:"node-canvas"})," (^2.11.2), which requires an additional step:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install canvas@^2.11.2\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["For instance, the ",(0,r.jsx)(n.code,{children:"pdf2img"})," function has the following TypeScript interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"pdf2img(pdf: ArrayBuffer, options?: Pdf2ImgOptions): Promise<ArrayBuffer[]>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See the details here:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/main/packages/converter/src/pdf2img.ts",children:"https://github.com/pdfme/pdfme/blob/main/packages/converter/src/pdf2img.ts"})]}),"\n",(0,r.jsx)(n.p,{children:"Below is an example in TypeScript that reads a local PDF, converts the first page into a PNG, and saves it as a thumbnail:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import fs from 'fs';\nimport path from 'path';\nimport { pdf2img } from '@pdfme/converter';\n\nasync function generateThumbnail(pdfPath: string, thumbnailPath: string): Promise<void> {\n  try {\n    const pdf = fs.readFileSync(pdfPath);\n    const pdfArrayBuffer = pdf.buffer.slice(pdf.byteOffset, pdf.byteOffset + pdf.byteLength);\n\n    const images = await pdf2img(pdfArrayBuffer, {\n      imageType: 'png',\n      range: { end: 1 },\n    });\n\n    const thumbnail = images[0];\n    fs.writeFileSync(thumbnailPath, Buffer.from(thumbnail));\n\n    console.log(`Thumbnail saved to ${thumbnailPath}`);\n  } catch (err) {\n    console.error(`Failed to generate thumbnail from ${pdfPath} to ${thumbnailPath}`, err);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For reference, check out the ",(0,r.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/blob/main/playground/scripts/generate-templates-thumbnail.js",children:"thumbnail generation script"})," in the repository\u2019s playground directory."]}),"\n",(0,r.jsx)(n.h2,{id:"contact",children:"Contact"}),"\n",(0,r.jsxs)(n.p,{children:["If you have any questions or suggestions about ",(0,r.jsx)(n.code,{children:"@pdfme/converter"}),", please reach out via:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discord"}),": ",(0,r.jsx)(n.a,{href:"https://discord.gg/xWPTJbmgNV",children:"https://discord.gg/xWPTJbmgNV"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GitHub Issues"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/pdfme/pdfme/issues",children:"https://github.com/pdfme/pdfme/issues"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);